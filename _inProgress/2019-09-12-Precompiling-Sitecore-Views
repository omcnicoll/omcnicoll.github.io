---
layout: post
comments: true
title:  "Azure PAAS Performance Enhancements"
date:   2019-09-12 11:04:24 -0400
categories: Sitecore
tags: Sitecore-9.1 Azure-Paas Precompile view-precompiling elastic-pools performance-enhancements
---

Slow. Painfully slow. Those are my first thoughts whenever I hear we're developing a Sitecore solution with Azure PAAS. 15-20 minute startup times, error essages from timeouts every 240 seconds, these are some of the struggles we've surely all faced. It doesn't have to be that way though! The two changes I've found have the biggest increases on startup performance are seperate elastic pools for your SQL databases, and most of all: view precompilation. While I did find the largest decreases on load time from view precompilation, it wasn't the easiest process to setup, and it does make development more of a hassle. Here's how I set it up the first time, hopefully with much room to improve!

1. Download the RazorGenerator.Mvc nuget package into your solution
2. Install the Razor generator visual studio extension.
3. Set all of your views to build action none.
4. For each project with views, run enable razor generator
5. You should see all the cs files get created.
6. Add a config to the project to enable view preocmpilation from Sitecore side
7. If using glass, add a precompiled view finder.


![Clone-Rendering-General-Tab]({{ site.baseurl }}/images/posts/2019-04-01-SXA-Rendering-Clone/GeneralTab.jpg){:class="img-responsive"}

Great! We've now cloned the promo and created our own hero component. To test and make sure it works correctly, you can open a new blank SXA page in Experience Editor, and you should find the **Hero** component as a drag and drop option under **Page Content**. Of course, right now we're still using the promo template and rendering variant markup. Part two will be looking at how to update that markup and finish our new component.


![Experience-Editor_Success]({{ site.baseurl }}/images/posts/2019-04-01-SXA-Rendering-Clone/EE.jpg){:class="img-responsive"}
